name: Build and Release ROOT

on:
  workflow_dispatch:
  push:
    branches: [ main ]
    paths:
      - 'build_root.sh'
      - '.github/workflows/build.yml'

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    env:
      CCACHE_DIR: ${{ github.workspace }}/.ccache
      CCACHE_MAXSIZE: 20G
      CMAKE_BUILD_PARALLEL_LEVEL: 2
      DEBIAN_FRONTEND: noninteractive
    strategy:
      fail-fast: false  # Continue other builds even if one fails
      max-parallel: 1   # Run builds sequentially to avoid resource conflicts
      matrix:
        root-version: ['6.30.04', '6.32.04']
        python-version: ['3.11', '3.12']

    steps:
    - uses: actions/checkout@v3

    - name: Set up environment
      run: |
        sudo apt-get update
        sudo apt-get install -y curl jq ccache
        # Set up ccache
        ccache --max-size=20G
        ccache --set-config=compression=true
        ccache --set-config=compression_level=6
        
        # Increase system limits
        sudo sysctl -w vm.max_map_count=262144
        sudo sysctl -w fs.file-max=65536
        ulimit -n 4096

    - name: Check if release exists
      id: check_release
      run: |
        ROOT_VERSION=${{ matrix.root-version }}
        RELEASE_TAG="root-v${ROOT_VERSION}-python${{ matrix.python-version }}"
        
        # Check if release exists
        RELEASE_ID=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          "https://api.github.com/repos/${{ github.repository }}/releases/tags/${RELEASE_TAG}" | \
          jq -r '.id // empty')
        
        if [ ! -z "$RELEASE_ID" ]; then
          echo "RELEASE_EXISTS=true" >> $GITHUB_ENV
          echo "RELEASE_ID=$RELEASE_ID" >> $GITHUB_ENV
        else
          echo "RELEASE_EXISTS=false" >> $GITHUB_ENV
        fi

    - name: Delete existing release if it exists
      if: env.RELEASE_EXISTS == 'true'
      run: |
        curl -X DELETE -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          "https://api.github.com/repos/${{ github.repository }}/releases/${{ env.RELEASE_ID }}"
        
        # Delete the tag
        git push --delete origin "root-v${{ matrix.root-version }}-python${{ matrix.python-version }}" || true

    - name: Build ROOT
      run: |
        chmod +x build_root.sh
        ./build_root.sh ${{ matrix.python-version }} ${{ matrix.root-version }}

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: root-v${{ matrix.root-version }}-python${{ matrix.python-version }}
        release_name: ROOT v${{ matrix.root-version }} for Python ${{ matrix.python-version }}
        body: |
          Automated build of ROOT v${{ matrix.root-version }} for Python ${{ matrix.python-version }}
          
          This release contains:
          - ROOT version: ${{ matrix.root-version }}
          - Python version: ${{ matrix.python-version }}
          - Built on Ubuntu latest
        draft: false
        prerelease: false

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./artifacts/root_v${{ matrix.root-version }}_Ubuntu_Python${{ matrix.python-version }}.zip
        asset_name: root_v${{ matrix.root-version }}_Ubuntu_Python${{ matrix.python-version }}.zip
        asset_content_type: application/zip

  # Summary job that runs after all builds
  build-summary:
    needs: build-and-release
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Check build matrix status
        run: |
          if [[ "${{ needs.build-and-release.result }}" == "success" ]]; then
            echo "All builds completed successfully!"
            exit 0
          else
            echo "Some builds failed. Check the build matrix for details."
            exit 1
          fi
