name: Build ROOT for Multiple Python and ROOT Versions

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12', '3.13']
        root-version: ['6.30.04', '6.32.04', '6.34.04']
        
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Setup Python environment
      run: |
        python -m venv venv
        source venv/bin/activate
        python -m pip install --upgrade pip
        python -m pip install numpy
        # Store Python paths for CMake configuration
        echo "PYTHON_PATH=$(which python)" >> $GITHUB_ENV
        echo "PYTHON_LIBRARY=$(python -c 'import sysconfig; print(sysconfig.get_config_var("LIBDIR") + "/lib" + sysconfig.get_config_var("LDLIBRARY"))')" >> $GITHUB_ENV
        echo "PYTHON_INCLUDE_DIR=$(python -c 'import sysconfig; print(sysconfig.get_config_var("INCLUDEPY"))')" >> $GITHUB_ENV
        echo "NUMPY_INCLUDE_DIR=$(python -c 'import numpy; print(numpy.get_include())')" >> $GITHUB_ENV

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          dpkg-dev cmake g++ gcc binutils \
          libx11-dev libxpm-dev libxft-dev libxext-dev \
          libssl-dev libpcre3-dev \
          xlibmesa-glu-dev libglew-dev libftgl-dev \
          libmysqlclient-dev libfftw3-dev libcfitsio-dev \
          graphviz-dev libavahi-compat-libdnssd-dev \
          libldap2-dev python3-dev libxml2-dev \
          libgsl-dev gfortran tar wget \
          libtbb-dev \
          ninja-build \
          python3-numpy \
          libgsl-dev
          
    - name: Download and extract ROOT source
      run: |
        wget https://root.cern/download/root_v${{ matrix.root-version }}.source.tar.gz
        tar -xzvf root_v${{ matrix.root-version }}.source.tar.gz
        
    - name: Configure and build ROOT
      run: |
        mkdir root-build
        cd root-build
        source ../venv/bin/activate
        
        # Set version comparison variables
        ROOT_VERSION="${{ matrix.root-version }}"
        ROOT_MAJOR=$(echo $ROOT_VERSION | cut -d. -f1)
        ROOT_MINOR=$(echo $ROOT_VERSION | cut -d. -f2)
        ROOT_PATCH=$(echo $ROOT_VERSION | cut -d. -f3)
        
        # Set common CMake flags
        COMMON_CMAKE_FLAGS="-DCMAKE_INSTALL_PREFIX=/usr/local \
          -DPYTHON_EXECUTABLE=$PYTHON_PATH \
          -DPython3_ROOT_DIR=$(dirname $(dirname $PYTHON_PATH)) \
          -DPython3_EXECUTABLE=$PYTHON_PATH \
          -DPython3_LIBRARY=$PYTHON_LIBRARY \
          -DPython3_INCLUDE_DIR=$PYTHON_INCLUDE_DIR \
          -DPython3_NumPy_INCLUDE_DIRS=$NUMPY_INCLUDE_DIR \
          -Dmathmore=ON \
          -Droofit=ON \
          -Dthread=ON \
          -Dssl=ON \
          -Dxml=ON \
          -Dxrootd=OFF \
          -Dbuiltin_xrootd=OFF \
          -Dbuiltin_ftgl=ON \
          -Dbuiltin_glew=ON \
          -Dasimage=ON \
          -Dgdml=ON \
          -Dhttp=ON \
          -Dvc=OFF \
          -Dimt=ON \
          -Dccache=OFF \
          -Dpyroot=ON \
          -DCMAKE_CXX_STANDARD=17 \
          -Dtesting=OFF \
          -Droot7=ON \
          -Dwebgui=ON \
          -Dopengl=ON \
          -Dbuiltin_tbb=OFF \
          -Dtbb=ON \
          -Dcuda=OFF \
          -Dcudnn=OFF \
          -GNinja"

        # Add version-specific flags
        VERSION_SPECIFIC_FLAGS=""
        
        # Version specific flags for different ROOT versions
        if [[ $ROOT_MINOR -lt 30 ]]; then
          VERSION_SPECIFIC_FLAGS="$VERSION_SPECIFIC_FLAGS -Dgsl_shared=ON"
        else
          VERSION_SPECIFIC_FLAGS="$VERSION_SPECIFIC_FLAGS -Dgsl=ON"
        fi
        
        # Add builtin_afterimage only for versions < 6.34
        if [[ $ROOT_MINOR -lt 34 ]]; then
          VERSION_SPECIFIC_FLAGS="$VERSION_SPECIFIC_FLAGS -Dbuiltin_afterimage=ON"
        fi

        # Configure with all flags
        cmake ../root-${{ matrix.root-version }} ${COMMON_CMAKE_FLAGS} ${VERSION_SPECIFIC_FLAGS}
        
        # Build using Ninja
        ninja -j$(nproc)
        
- name: Package ROOT
      run: |
        cd root-build
        source ../venv/bin/activate
        sudo ninja install
        # Create package with absolute path
        mkdir -p /home/runner/artifacts
        sudo tar czf /home/runner/artifacts/root_v${{ matrix.root-version }}_Ubuntu_Python${{ matrix.python-version }}.tar.gz -C /usr/local .
        
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ matrix.root-version }}-py${{ matrix.python-version }}
        release_name: ROOT v${{ matrix.root-version }} for Python ${{ matrix.python-version }}
        draft: false
        prerelease: false
        
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: /home/runner/artifacts/root_v${{ matrix.root-version }}_Ubuntu_Python${{ matrix.python-version }}.tar.gz
        asset_name: root_v${{ matrix.root-version }}_Ubuntu_Python${{ matrix.python-version }}.tar.gz
        asset_content_type: application/gzip
